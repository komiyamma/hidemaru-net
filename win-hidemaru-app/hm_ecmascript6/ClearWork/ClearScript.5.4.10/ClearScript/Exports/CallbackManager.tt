// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".h" #>

<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>

<# const int maxArgCount = 16; #>
<# const int slotCount = 64; #>

#pragma once

//-----------------------------------------------------------------------------
// macros
//-----------------------------------------------------------------------------

#define DEFINE_CALLBACK_MANAGER(NAME, TYPE) \
    DEFINE_CALLBACK_MANAGER_INTERNAL(NAME, TYPE, NullMutex)

#define DEFINE_CONCURRENT_CALLBACK_MANAGER(NAME, TYPE) \
    DEFINE_CALLBACK_MANAGER_INTERNAL(NAME, TYPE, RecursiveMutex)

#define DEFINE_CALLBACK_MANAGER_INTERNAL(NAME, CALLBACK_TYPE, MUTEX_TYPE) \
    struct NAME##CallbackTraits: public CallbackTraits<NAME##CallbackTraits, CALLBACK_TYPE, MUTEX_TYPE> {};

#define CALLBACK_MANAGER(NAME) \
    CallbackManager<NAME##CallbackTraits>

//-----------------------------------------------------------------------------
// CallbackTraits
//-----------------------------------------------------------------------------

template <typename TTraits, typename TCallback, typename TMutex>
class CallbackTraits
{
    PROHIBIT_CONSTRUCT(CallbackTraits)

public:

    typedef TCallback CallbackT;

    template <typename TResult>
    static TResult CallWithLock(const std::function<TResult()>& function)
    {
        BEGIN_MUTEX_SCOPE(*ms_pMutex)

            return function();

        END_MUTEX_SCOPE
    }

private:

    // Put the mutex on the heap. At process shutdown, static cleanup races against GC,
    // so using non-POD static data in conjunction with managed objects is problematic.

    static TMutex* ms_pMutex;
};

template <typename TTraits, typename TCallback, typename TMutex>
TMutex* CallbackTraits<TTraits, TCallback, TMutex>::ms_pMutex = new TMutex;

//-----------------------------------------------------------------------------
// CallbackSlot (unused)
//-----------------------------------------------------------------------------

template <typename TTraits, size_t NIndex, typename TCallback>
class CallbackSlot
{
    PROHIBIT_CONSTRUCT(CallbackSlot)
};

//-----------------------------------------------------------------------------
// CallbackSlot specializations
//-----------------------------------------------------------------------------

<#
for (var count = 0; count <= maxArgCount; count++)
{
   var typeParamList = (count < 1) ? string.Empty : string.Concat(Enumerable.Range(0, count).Select(index => ", typename T" + index));
   var paramTypeList = (count < 1) ? string.Empty : string.Join(", ", Enumerable.Range(0, count).Select(index => "T" + index));
   var paramList = (count < 1) ? string.Empty : string.Join(", ", Enumerable.Range(0, count).Select(index => "T" + index + " a" + index));
   var argList = (count < 1) ? string.Empty : string.Join(", ", Enumerable.Range(0, count).Select(index => "a" + index));
#>

template <typename TTraits, size_t NIndex, typename TResult<#= typeParamList #>>
class CallbackSlot<TTraits, NIndex, TResult(<#= paramTypeList #>)>
{
    PROHIBIT_CONSTRUCT(CallbackSlot)

public:

    typedef TResult CallbackT(<#= paramTypeList #>);
    typedef std::function<CallbackT> FunctionT;

    static TResult Callback(<#= paramList #>)
    {
        return GetFunctionWithLock()(<#= argList #>);
    }

    static FunctionT GetFunctionWithLock()
    {
        return TTraits::CallWithLock<FunctionT>([]
        {
            return GetFunction();
        });
    }

    static void SetFunctionWithLock(const FunctionT& function)
    {
        TTraits::CallWithLock<void>([&function]
        {
            SetFunction(function);
        });
    }

    static FunctionT GetFunction()
    {
        return (ms_pFunction != nullptr) ? *ms_pFunction : nullptr;
    }

    static void SetFunction(const FunctionT& function)
    {
        if (ms_pFunction != nullptr)
        {
            delete ms_pFunction;
        }

        ms_pFunction = new FunctionT(function);
    }

    static bool HasFunction()
    {
        return (ms_pFunction != nullptr) ? static_cast<bool>(*ms_pFunction) : false;
    }

private:

    // Put the functor on the heap. At process shutdown, static cleanup races against GC,
    // so using non-POD static data in conjunction with managed objects is problematic.

    static FunctionT* ms_pFunction;
};

template <typename TTraits, size_t NIndex, typename TResult<#= typeParamList #>>
std::function<TResult(<#= paramTypeList #>)>* CallbackSlot<TTraits, NIndex, TResult(<#= paramTypeList #>)>::ms_pFunction = nullptr;
<#
}
#>

//-----------------------------------------------------------------------------
// CallbackManager
//-----------------------------------------------------------------------------

template <typename TTraits>
class CallbackManager
{
    PROHIBIT_CONSTRUCT(CallbackManager)

public:

    typedef typename TTraits::CallbackT CallbackT;
    typedef std::function<CallbackT> FunctionT;

    static CallbackT* Alloc(const FunctionT& function)
    {
        return TTraits::CallWithLock<CallbackT*>([&function]
        {
            <#
            for (var index = 0; index < slotCount; index++)
            {
            #>

            if (!HasFunction<<#= index #>>())
            {
                SetFunction<<#= index #>>(function);
                return GetCallback<<#= index #>>();
            }
            <#
            }
            #>

            return static_cast<CallbackT*>(nullptr);
        });
    }

    static bool Free(CallbackT* pCallback)
    {
        return TTraits::CallWithLock<bool>([pCallback]
        {
            <#
            for (var index = 0; index < slotCount; index++)
            {
            #>

            if (pCallback == GetCallback<<#= index #>>())
            {
                _ASSERTE(HasFunction<<#= index #>>());
                SetFunction<<#= index #>>(nullptr);
                return true;
            }
            <#
            }
            #>

            return false;
        });
    }

private:

    template <size_t NIndex>
    static CallbackT* GetCallback()
    {
        return CallbackSlot<TTraits, NIndex, CallbackT>::Callback;
    }

    template <size_t NIndex>
    static void SetFunction(const FunctionT& function)
    {
        CallbackSlot<TTraits, NIndex, CallbackT>::SetFunction(function);
    }

    template <size_t NIndex>
    static bool HasFunction()
    {
        return CallbackSlot<TTraits, NIndex, CallbackT>::HasFunction();
    }
};
