diff --git a/BUILD.gn b/BUILD.gn
index 1dc6c7d5ac..6bb8999ed7 100644
--- a/BUILD.gn
+++ b/BUILD.gn
@@ -680,7 +680,7 @@ config("toolchain") {
   visibility = [ "./*" ]
 
   defines = []
-  cflags = []
+  cflags = [ "-Wno-invalid-offsetof" ]
   ldflags = []
 
   if (v8_current_cpu == "arm") {
diff --git a/src/codegen/code-stub-assembler.cc b/src/codegen/code-stub-assembler.cc
index ca340c69c8..4b4514b529 100644
--- a/src/codegen/code-stub-assembler.cc
+++ b/src/codegen/code-stub-assembler.cc
@@ -12266,6 +12266,11 @@ TNode<String> CodeStubAssembler::Typeof(SloppyTNode<Object> value) {
 
   GotoIf(InstanceTypeEqual(instance_type, ODDBALL_TYPE), &if_oddball);
 
+  Label resume_default(this);
+  GotoIfNot(Word32And(LoadMapBitField(map), Int32Constant(Map::Bits1::HasNamedInterceptorBit::kMask)), &resume_default);
+  Branch(Word32And(LoadMapBitField2(map), Int32Constant(Map::Bits2::IsImmutablePrototypeBit::kMask)), &return_function, &return_object);
+  BIND(&resume_default);
+
   TNode<Int32T> callable_or_undetectable_mask =
       Word32And(LoadMapBitField(map),
                 Int32Constant(Map::Bits1::IsCallableBit::kMask |
diff --git a/src/compiler/backend/register-allocator-verifier.cc b/src/compiler/backend/register-allocator-verifier.cc
index 50e57bc5ad..fa687a760a 100644
--- a/src/compiler/backend/register-allocator-verifier.cc
+++ b/src/compiler/backend/register-allocator-verifier.cc
@@ -352,7 +352,7 @@ bool BlockAssessments::IsStaleReferenceStackSlot(InstructionOperand op) {
 
 void BlockAssessments::Print() const {
   StdoutStream os;
-  for (const auto pair : map()) {
+  for (const auto& pair : map()) {
     const InstructionOperand op = pair.first;
     const Assessment* assessment = pair.second;
     // Use operator<< so we can write the assessment on the same
diff --git a/src/diagnostics/unwinding-info-win64.cc b/src/diagnostics/unwinding-info-win64.cc
index f3b9a753af..14a7d3b9ce 100644
--- a/src/diagnostics/unwinding-info-win64.cc
+++ b/src/diagnostics/unwinding-info-win64.cc
@@ -457,6 +457,14 @@ void InitUnwindingRecord(Record* record, size_t code_size_in_bytes) {
 namespace {
 
 V8_DECLARE_ONCE(load_ntdll_unwinding_functions_once);
+
+#if defined(V8_OS_WIN_X64)
+static decltype(
+    &::RtlAddFunctionTable) add_function_table_func = nullptr;
+static decltype(
+    &::RtlDeleteFunctionTable) delete_function_table_func = nullptr;
+#endif  // V8_OS_WIN_X64
+
 static decltype(
     &::RtlAddGrowableFunctionTable) add_growable_function_table_func = nullptr;
 static decltype(
@@ -465,6 +473,19 @@ static decltype(
 
 void LoadNtdllUnwindingFunctions() {
   base::CallOnce(&load_ntdll_unwinding_functions_once, []() {
+
+#if defined(V8_OS_WIN_X64)
+    HMODULE kernel32_module =
+        LoadLibraryEx(L"kernel32.dll", nullptr, LOAD_LIBRARY_SEARCH_SYSTEM32);
+    DCHECK_NOT_NULL(kernel32_module);
+    add_function_table_func =
+        reinterpret_cast<decltype(&::RtlAddFunctionTable)>(
+            ::GetProcAddress(kernel32_module, "RtlAddFunctionTable"));
+    delete_function_table_func =
+        reinterpret_cast<decltype(&::RtlDeleteFunctionTable)>(
+            ::GetProcAddress(kernel32_module, "RtlDeleteFunctionTable"));
+#endif  // V8_OS_WIN_X64
+
     // Load functions from the ntdll.dll module.
     HMODULE ntdll_module =
         LoadLibraryEx(L"ntdll.dll", nullptr, LOAD_LIBRARY_SEARCH_SYSTEM32);
@@ -483,6 +504,21 @@ void LoadNtdllUnwindingFunctions() {
   });
 }
 
+#if defined(V8_OS_WIN_X64)
+BOOLEAN AddFunctionTable(PRUNTIME_FUNCTION FunctionTable,
+                         DWORD EntryCount,
+                         DWORD64 BaseAddress) {
+  LoadNtdllUnwindingFunctions();
+  DCHECK_NOT_NULL(add_function_table_func);
+  return add_function_table_func(FunctionTable, EntryCount, BaseAddress);
+}
+BOOLEAN DeleteFunctionTable(PRUNTIME_FUNCTION FunctionTable) {
+  LoadNtdllUnwindingFunctions();
+  DCHECK_NOT_NULL(delete_function_table_func);
+  return delete_function_table_func(FunctionTable);
+}
+#endif  // V8_OS_WIN_X64
+
 bool AddGrowableFunctionTable(PVOID* DynamicTable,
                               PRUNTIME_FUNCTION FunctionTable, DWORD EntryCount,
                               DWORD MaximumEntryCount, ULONG_PTR RangeBase,
@@ -534,7 +570,7 @@ void RegisterNonABICompliantCodeRange(void* start, size_t size_in_bytes) {
       ExceptionHandlerRecord* record = new (start) ExceptionHandlerRecord();
       InitUnwindingRecord(record, size_in_bytes);
 
-      CHECK(::RtlAddFunctionTable(record->runtime_function,
+      CHECK(AddFunctionTable(record->runtime_function,
                                   kDefaultRuntimeFunctionCount,
                                   reinterpret_cast<DWORD64>(start)));
 
@@ -572,7 +608,7 @@ void UnregisterNonABICompliantCodeRange(void* start) {
     if (unhandled_exception_callback_g) {
       ExceptionHandlerRecord* record =
           reinterpret_cast<ExceptionHandlerRecord*>(start);
-      CHECK(::RtlDeleteFunctionTable(record->runtime_function));
+      CHECK(DeleteFunctionTable(record->runtime_function));
     }
 #endif  // V8_OS_WIN_X64
   } else {
diff --git a/src/execution/isolate.h b/src/execution/isolate.h
index 18fb4b6417..b385f08ac4 100644
--- a/src/execution/isolate.h
+++ b/src/execution/isolate.h
@@ -571,7 +571,6 @@ class V8_EXPORT_PRIVATE Isolate final : private HiddenFactory {
   // Returns the isolate inside which the current thread is running.
   V8_INLINE static Isolate* Current() {
     Isolate* isolate = TryGetCurrent();
-    DCHECK_NOT_NULL(isolate);
     return isolate;
   }
 
diff --git a/src/execution/stack-guard.cc b/src/execution/stack-guard.cc
index a98fb07c93..6774605093 100644
--- a/src/execution/stack-guard.cc
+++ b/src/execution/stack-guard.cc
@@ -200,8 +200,10 @@ void StackGuard::FreeThreadResources() {
 void StackGuard::ThreadLocal::Initialize(Isolate* isolate,
                                          const ExecutionAccess& lock) {
   const uintptr_t kLimitSize = FLAG_stack_size * KB;
-  DCHECK_GT(GetCurrentStackPosition(), kLimitSize);
   uintptr_t limit = GetCurrentStackPosition() - kLimitSize;
+  if (GetCurrentStackPosition() < kLimitSize) {
+    limit = 0;
+  }
   real_jslimit_ = SimulatorStack::JsLimitFromCLimit(isolate, limit);
   set_jslimit(SimulatorStack::JsLimitFromCLimit(isolate, limit));
   real_climit_ = limit;
diff --git a/src/init/v8.cc b/src/init/v8.cc
index 2b2194ca73..6f272842a7 100644
--- a/src/init/v8.cc
+++ b/src/init/v8.cc
@@ -124,7 +124,6 @@ void V8::InitializeOncePerProcess() {
 }
 
 void V8::InitializePlatform(v8::Platform* platform) {
-  CHECK(!platform_);
   CHECK(platform);
   platform_ = platform;
   v8::base::SetPrintStackTrace(platform_->GetStackTracePrinter());
diff --git a/src/objects/objects.cc b/src/objects/objects.cc
index 5c67fa388f..1f51762baa 100644
--- a/src/objects/objects.cc
+++ b/src/objects/objects.cc
@@ -829,6 +829,12 @@ Handle<String> Object::TypeOf(Isolate* isolate, Handle<Object> object) {
   if (object->IsString()) return isolate->factory()->string_string();
   if (object->IsSymbol()) return isolate->factory()->symbol_string();
   if (object->IsBigInt()) return isolate->factory()->bigint_string();
+  if (object->IsJSObject()) {
+    Handle<JSObject> obj = Handle<JSObject>::cast(object);
+    if (obj->HasNamedInterceptor()) {
+      return obj->map().is_immutable_proto() ? isolate->factory()->function_string() : isolate->factory()->object_string();
+    }
+  }
   if (object->IsCallable()) return isolate->factory()->function_string();
   return isolate->factory()->object_string();
 }
