/* 
 * HmCustomStringEncorder v1.0.5.2
 * Copyright (c) 2017-2019 Akitsugu Komiyama
 * under the Apache License Version 2.0
 */

// --------------------------------------------------------------------------------
// 各種パラメータの設定
// --------------------------------------------------------------------------------
ParameterSettings: 
{
    // 変換後のコードページ 
    // https://msdn.microsoft.com/ja-jp/library/windows/desktop/dd317756(v=vs.85).aspx の「コードページ」のいずれでも指定可能。
    #ToEncodeCodePage = 932;

    // 文字列を正規化する度合い(2:すべてNFC。1:結合文字やサロゲートペアのみNFC、0:何もしない);
    #NormalizeForm = 1;
}
goto Main;


// --------------------------------------------------------------------------------
// フォールバック(変換出来ない文字への遭遇)の際に、どのような文字列へと再マッピングするかの定義
// (無事に変換出来た文字は、そもそもフォールバックが発生しないので、
//  ここで指定したとしても、対象とはならないので注意)
// --------------------------------------------------------------------------------
PushFallBackPairs:
{
    call PushFallBackPair "㉑", "(21)";
    call PushFallBackPair "\uD867\uDE3D", "ほっけ"; // 魚偏に花と書いてホッケ
    call PushFallBackPair "♬", "♪"; // 音符を普通の♪に
    call PushFallBackPair "🎶", "♪"; // 音符を普通の♪に
    call PushFallBackPair "\u2049", "!?";
    return;
}


// --------------------------------------------------------------------------------
// 以上までが一般的なカスタムの範囲
// --------------------------------------------------------------------------------





// --------------------------------------------------------------------------------
// ここから下を変更する場合、C#ソースも含め、ある程度は挙動を理解した上で変更のこと
// --------------------------------------------------------------------------------

HmCustomStringEncorder:
{
    // SRC
    {
        $DLLPATH = currentmacrodirectory + @"\HmCustomStringEncoder.dll";
        #NET = loaddll( hidemarudir + @"\hm.NET.dll" ); // hm.NET.dllは自己管理型なので、freedllしないこと。

        #r = dllfuncw( #NET, "CallMethod", $DLLPATH, "HmCustomStringEncoder", "Open" );

        // まずは、現行最も広範囲に表現出来るUnicode系で、Normalize(合成文字は１つにして)して表現してみる
        $text = dllfuncstrw( #NET, "CallMethod", $DLLPATH, "HmCustomStringEncoder", "ToEncode", 65001, #NormalizeForm );

        #r = dllfuncw( #NET, "CallMethod", $DLLPATH, "HmCustomStringEncoder", "Close" );

        // １つめ控え
        newfile;
        insert $text;
        #handle_src = hidemaruhandle(0);
        clearupdated;
    }

    // DST
    {
        #NET = loaddll( hidemarudir + @"\hm.NET.dll" ); // hm.NET.dllは自己管理型なので、freedllしないこと。

        #r = dllfuncw( #NET, "CallMethod", $DLLPATH, "HmCustomStringEncoder", "Open");

        // ユーザー定義によるフォールバック時の変換規則を加える
        call PushFallBackPairs;

        // 指定のコードで、Normalize(合成文字は１つにして)して表現してみる。ユーザー定義フォールバック変換も採用する
        $text = dllfuncstrw( #NET, "CallMethod", $DLLPATH, "HmCustomStringEncoder", "ToEncode", #ToEncodeCodePage, #NormalizeForm );

        #r = dllfuncw( #NET, "CallMethod", $DLLPATH, "HmCustomStringEncoder", "Close" );

        // ２つめ控え
        newfile;
        insert $text;
        #handle_dst = hidemaruhandle(0);
        clearupdated;

        title "HmCustomStringEncoder → [" + str(#ToEncodeCodePage) +"]の結果", 3;
        title -1, 3;
    }

    // COMPARE
    {
        // ２つの違いを出す。マーカー付き
        compfile hidemaruorder(#handle_src), 1;
        // １つ目は必要ないのでクローズ
        closehidemaru hidemaruorder(#handle_src);
    }

    return;
}


PushFallBackPair:
{
    $$src = $$1;
    $$dst = $$2;
    // フォールバック(変換出来ない文字への遭遇)の際に、どのような文字へと再マッピングするかの定義
    #r = dllfuncw( #NET, "CallMethod", $DLLPATH, "HmCustomStringEncoder", "PushFallBackPair", $$src, $$dst );
    return;
}


Main:
{
    call HmCustomStringEncorder;
    endmacro;
}
