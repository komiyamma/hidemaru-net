diff --git a/BUILD.gn b/BUILD.gn
index 5df0619b1d..66e318705e 100644
--- a/BUILD.gn
+++ b/BUILD.gn
@@ -211,6 +211,12 @@ if (v8_multi_arch_build &&
   v8_enable_pointer_compression = !v8_enable_pointer_compression
 }
 
+if (v8_current_cpu == "x86") {
+  clearscript_v8_platform = "ia32"
+} else {
+  clearscript_v8_platform = v8_current_cpu
+}
+
 # Derived defaults.
 if (v8_enable_verify_heap == "") {
   v8_enable_verify_heap = v8_enable_debugging_features
@@ -3533,6 +3539,7 @@ v8_source_set("torque_ls_base") {
 }
 
 v8_component("v8_libbase") {
+  output_name = "v8-base-${clearscript_v8_platform}"
   sources = [
     "src/base/address-region.h",
     "src/base/atomic-utils.h",
@@ -3733,6 +3740,7 @@ v8_component("v8_libbase") {
 }
 
 v8_component("v8_libplatform") {
+  output_name = "v8-platform-${clearscript_v8_platform}"
   sources = [
     "//base/trace_event/common/trace_event_common.h",
     "include/libplatform/libplatform-export.h",
@@ -4147,6 +4155,7 @@ group("v8_fuzzers") {
 
 if (is_component_build) {
   v8_component("v8") {
+    output_name = "v8-${clearscript_v8_platform}"
     sources = [
       "src/utils/v8dll-main.cc",
     ]
diff --git a/include/v8-inspector.h b/include/v8-inspector.h
index 5f53f21d55..1e575d2abe 100644
--- a/include/v8-inspector.h
+++ b/include/v8-inspector.h
@@ -249,6 +249,7 @@ struct V8_EXPORT V8StackTraceId {
 class V8_EXPORT V8Inspector {
  public:
   static std::unique_ptr<V8Inspector> create(v8::Isolate*, V8InspectorClient*);
+  static V8Inspector* createPtr(v8::Isolate*, V8InspectorClient*);
   virtual ~V8Inspector() = default;
 
   // Contexts instrumentation.
diff --git a/include/v8-platform.h b/include/v8-platform.h
index c6e78f2381..217e2bff08 100644
--- a/include/v8-platform.h
+++ b/include/v8-platform.h
@@ -444,6 +444,19 @@ class Platform {
   V8_EXPORT static double SystemClockTimeMillis();
 };
 
+class SafePlatform {
+ public:
+  virtual int NumberOfWorkerThreads() = 0;
+  virtual TaskRunner* CreateForegroundTaskRunner(Isolate* isolate) = 0;
+  virtual void CallOnWorkerThread(std::unique_ptr<Task> task) = 0;
+  virtual void CallDelayedOnWorkerThread(std::unique_ptr<Task> task, double delay_in_seconds) = 0;
+  virtual void CallOnForegroundThread(Isolate* isolate, Task* task) = 0;
+  virtual void CallDelayedOnForegroundThread(Isolate* isolate, Task* task, double delay_in_seconds) = 0;
+  virtual double MonotonicallyIncreasingTime() = 0;
+  virtual double CurrentClockTimeMillis() = 0;
+  virtual TracingController* GetTracingController() = 0;
+  V8_EXPORT static void Initialize(SafePlatform& impl);
+};
 }  // namespace v8
 
 #endif  // V8_V8_PLATFORM_H_
diff --git a/include/v8.h b/include/v8.h
index 1387f74715..8a03fc9320 100644
--- a/include/v8.h
+++ b/include/v8.h
@@ -1624,6 +1624,7 @@ class V8_EXPORT ScriptCompiler {
     // (with delete[]) when the CachedData object is destroyed.
     CachedData(const uint8_t* data, int length,
                BufferPolicy buffer_policy = BufferNotOwned);
+    void Delete();
     ~CachedData();
     // TODO(marja): Async compilation; add constructors which take a callback
     // which will be called when V8 no longer needs the data.
diff --git a/src/api/api.cc b/src/api/api.cc
index 0d80f986f1..e1ac3ead27 100644
--- a/src/api/api.cc
+++ b/src/api/api.cc
@@ -2047,6 +2047,10 @@ ScriptCompiler::CachedData::CachedData(const uint8_t* data_, int length_,
       rejected(false),
       buffer_policy(buffer_policy_) {}
 
+void ScriptCompiler::CachedData::Delete() {
+  delete this;
+}
+
 ScriptCompiler::CachedData::~CachedData() {
   if (buffer_policy == BufferOwned) {
     delete[] data;
diff --git a/src/codegen/code-stub-assembler.cc b/src/codegen/code-stub-assembler.cc
index 3051ce3662..713ba80688 100644
--- a/src/codegen/code-stub-assembler.cc
+++ b/src/codegen/code-stub-assembler.cc
@@ -12460,6 +12460,11 @@ TNode<String> CodeStubAssembler::Typeof(SloppyTNode<Object> value) {
 
   GotoIf(InstanceTypeEqual(instance_type, ODDBALL_TYPE), &if_oddball);
 
+  Label resume_default(this);
+  GotoIfNot(Word32And(LoadMapBitField(map), Int32Constant(Map::HasNamedInterceptorBit::kMask)), &resume_default);
+  Branch(Word32And(LoadMapBitField2(map), Int32Constant(Map::IsImmutablePrototypeBit::kMask)), &return_function, &return_object);
+  BIND(&resume_default);
+
   TNode<Int32T> callable_or_undetectable_mask = Word32And(
       LoadMapBitField(map),
       Int32Constant(Map::IsCallableBit::kMask | Map::IsUndetectableBit::kMask));
diff --git a/src/execution/stack-guard.cc b/src/execution/stack-guard.cc
index d37327f1c3..4f063b7bab 100644
--- a/src/execution/stack-guard.cc
+++ b/src/execution/stack-guard.cc
@@ -200,8 +200,10 @@ void StackGuard::FreeThreadResources() {
 void StackGuard::ThreadLocal::Initialize(Isolate* isolate,
                                          const ExecutionAccess& lock) {
   const uintptr_t kLimitSize = FLAG_stack_size * KB;
-  DCHECK_GT(GetCurrentStackPosition(), kLimitSize);
   uintptr_t limit = GetCurrentStackPosition() - kLimitSize;
+  if (GetCurrentStackPosition() < kLimitSize) {
+    limit = 0;
+  }
   real_jslimit_ = SimulatorStack::JsLimitFromCLimit(isolate, limit);
   set_jslimit(SimulatorStack::JsLimitFromCLimit(isolate, limit));
   real_climit_ = limit;
diff --git a/src/init/v8.cc b/src/init/v8.cc
index fd26c60848..a2081f5211 100644
--- a/src/init/v8.cc
+++ b/src/init/v8.cc
@@ -124,7 +124,6 @@ void V8::InitializeOncePerProcess() {
 }
 
 void V8::InitializePlatform(v8::Platform* platform) {
-  CHECK(!platform_);
   CHECK(platform);
   platform_ = platform;
   v8::base::SetPrintStackTrace(platform_->GetStackTracePrinter());
@@ -171,4 +170,49 @@ void V8::SetSnapshotBlob(StartupData* snapshot_blob) {
 double Platform::SystemClockTimeMillis() {
   return base::OS::TimeCurrentMillis();
 }
+
+class SafePlatformImpl final: public Platform {
+ public:
+  void SetImpl(SafePlatform& impl) {
+    impl_.store(&impl);
+  }
+  virtual int NumberOfWorkerThreads() override {
+    return impl_.load()->NumberOfWorkerThreads();
+  }
+  virtual std::shared_ptr<v8::TaskRunner> GetForegroundTaskRunner(Isolate* isolate) override {
+    return std::shared_ptr<v8::TaskRunner>(impl_.load()->CreateForegroundTaskRunner(isolate));
+  }
+  virtual void CallOnWorkerThread(std::unique_ptr<Task> task) override {
+    impl_.load()->CallOnWorkerThread(std::move(task));
+  }
+  virtual void CallDelayedOnWorkerThread(std::unique_ptr<Task> task, double delay_in_seconds) override {
+    impl_.load()->CallDelayedOnWorkerThread(std::move(task), delay_in_seconds);
+  }
+  virtual void CallOnForegroundThread(Isolate* isolate, Task* task) override {
+    impl_.load()->CallOnForegroundThread(isolate, task);
+  }
+  virtual void CallDelayedOnForegroundThread(Isolate* isolate, Task* task, double delay_in_seconds) override {
+    impl_.load()->CallDelayedOnForegroundThread(isolate, task, delay_in_seconds);
+  }
+  virtual double MonotonicallyIncreasingTime() override {
+    return impl_.load()->MonotonicallyIncreasingTime();
+  }
+  virtual double CurrentClockTimeMillis() override {
+    return impl_.load()->CurrentClockTimeMillis();
+  }
+  virtual TracingController* GetTracingController() override {
+    return impl_.load()->GetTracingController();
+  }
+ private:
+  std::atomic<SafePlatform*> impl_;
+};
+
+void SafePlatform::Initialize(SafePlatform& impl) {
+#pragma clang diagnostic push
+#pragma clang diagnostic ignored "-Wexit-time-destructors"
+  static SafePlatformImpl platform;
+#pragma clang diagnostic pop
+  platform.SetImpl(impl);
+  V8::InitializePlatform(&platform);
+}
 }  // namespace v8
diff --git a/src/inspector/v8-inspector-impl.cc b/src/inspector/v8-inspector-impl.cc
index e91dd7f7f4..762b050add 100644
--- a/src/inspector/v8-inspector-impl.cc
+++ b/src/inspector/v8-inspector-impl.cc
@@ -54,6 +54,10 @@ std::unique_ptr<V8Inspector> V8Inspector::create(v8::Isolate* isolate,
   return std::unique_ptr<V8Inspector>(new V8InspectorImpl(isolate, client));
 }
 
+V8Inspector* V8Inspector::createPtr(v8::Isolate* isolate, V8InspectorClient* client) {
+  return create(isolate, client).release();
+}
+
 V8InspectorImpl::V8InspectorImpl(v8::Isolate* isolate,
                                  V8InspectorClient* client)
     : m_isolate(isolate),
diff --git a/src/objects/objects.cc b/src/objects/objects.cc
index 227cff8da4..828bf57e31 100644
--- a/src/objects/objects.cc
+++ b/src/objects/objects.cc
@@ -811,6 +811,12 @@ Handle<String> Object::TypeOf(Isolate* isolate, Handle<Object> object) {
   if (object->IsString()) return isolate->factory()->string_string();
   if (object->IsSymbol()) return isolate->factory()->symbol_string();
   if (object->IsBigInt()) return isolate->factory()->bigint_string();
+  if (object->IsJSObject()) {
+    Handle<JSObject> obj = Handle<JSObject>::cast(object);
+    if (obj->HasNamedInterceptor()) {
+      return obj->map().is_immutable_proto() ? isolate->factory()->function_string() : isolate->factory()->object_string();
+    }
+  }
   if (object->IsCallable()) return isolate->factory()->function_string();
   return isolate->factory()->object_string();
 }
