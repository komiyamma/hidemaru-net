// 秀丸 v8.66以上
// hmV8 1.4.7.5 以上が必要。
if (!#JS) { #JS = loaddll( hidemarudir + @"\hmV8.dll" ); }
#_ = dllfuncw( #JS, "DoString", R"JS(

// Mecabの読み込み
let currentmacrodirectory = hm.Macro.Var["currentmacrodirectory"];
var lib = host.lib( currentmacrodirectory + "/LibNMeCab.dll" );
let Mecab = lib.NMeCab;
let param = new Mecab.MeCabParam();
// 辞書の位置を指定 あっと,いう
param.DicDir = currentmacrodirectory + "/ipadic";
let t = Mecab.MeCabTagger.Create(param);
let text = GetTargetText();
ParseNode(text);
// メモリが出来た
function ParseNode(text) {
	// 対象のテキストをMecabでパース
	let node = t.ParseToNode(text);
	let data_array = [];

	// 日本語で考える
	let ci = new clr.System.Globalization.CultureInfo("ja-JP");

	while (node != null)
	{
        console.log(node.Surface);
	    if (node.CharType > 0 )
	    {
			let yomi = GetYomiFromNode(node);
			// ひらがなとカタカナを区別しない状態で、２つの文字列を比べたとき、同じであれば…
			if (clr.System.String.Compare( node.Surface, yomi, ci, clr.System.Globalization.CompareOptions.IgnoreKanaType) == 0 ) {
	            console.log(node.Surface);
			} else {
	            console.log(node.Surface + "\t" + yomi);
			}

	    } else {
            console.log(node.Surface);
		}
	    node = node.Next;
	}
}

function GetYomiFromNode(node) {
	let features_text = node.Feature;
	// 「,」で区切られているのは事実だが、何個あるかは不明
	let results = features_text.split(',');
	let l = results.length;
	if (l>=8) { // 9個に分割というのは、よみがなを振ることが可能な状態
		let katakana_yomi = results[l-2];
	    let hiragana_yomi = ConvKatakanaToHiragana(katakana_yomi);
		return hiragana_yomi;
	}
	return "";
}

function ConvKatakanaToHiragana(src) {
	return src.replace(/[\u30a1-\u30f6]/g, function(match) {
		var chr = match.charCodeAt(0) - 0x60;
		return String.fromCharCode(chr);
	});
}

function GetTargetText() {
    if ( hm.Macro.Var["selecting"] ) {
	    return hm.Edit.SelectedText;
	}
	return "";
}

)JS"
);

freedll( #JS );