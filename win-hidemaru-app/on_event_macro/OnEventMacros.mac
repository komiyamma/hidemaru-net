/*
 * This codes is licensed under CC0 1.0 Universal
 * 自動起動マクロの書き方のパターンのサンプル
 */


//===========================================================
// イベント番号に対応するラベルへと飛ぶ。
//-----------------------------------------------------------
disablebreak;
$event_label = "OnEvent_" + sprintf("%02d", event);
call $event_label;
enablebreak;
endmacro;
//===========================================================


//===========================================================
// 自動起動マクロではない
//-----------------------------------------------------------
OnEvent_00:
    return;
//===========================================================

//===========================================================
// ファイルを開いた直後
//-----------------------------------------------------------
OnEvent_01:
    call OnPost_FileOpen;

    return;
//===========================================================

//===========================================================
// 新規作成直後
//-----------------------------------------------------------
OnEvent_02:
    call OnPost_NewDocumentMake;

    return;
//===========================================================

//===========================================================
// 保存直前と直後
//-----------------------------------------------------------
OnEvent_03:
    ##is_after_save = geteventparam(0);
    if (##is_after_save) {
        call OnPost_FileSave;
    } else {
        call OnPrev_FileSave;
    }

    return;
//===========================================================

//===========================================================
// 印刷直前と直後
//-----------------------------------------------------------
OnEvent_04:
    
    return;
//===========================================================

//===========================================================
// 編集後タイマー
//-----------------------------------------------------------
OnEvent_05:
    
    return;
//===========================================================

//===========================================================
// カーソル移動後タイマー
//-----------------------------------------------------------
OnEvent_06:
    
    return;
//===========================================================

//===========================================================
// ファイルを閉じる直前
//-----------------------------------------------------------
OnEvent_07:
    call OnPrev_FileClose;

    return;
//===========================================================

//===========================================================
// 秀丸の対象ウィンドウがアクティブになった直後
//-----------------------------------------------------------
OnEvent_08:
    call OnPost_WindowFocus;

    return;
//===========================================================


// 予備
OnEvent_09:
    return;

// 予備
OnEvent_10:
    return;


//===========================================================


//-----------------------------------------------------------
// 各実装
//-----------------------------------------------------------

//-----------------------------------------------------------
OnPost_FileOpen:

    call HmExcelFileLoader;

    call MacFile_EncodeNormalize;

    call LuaFile_EncodeNormalize;

    call HmLivePreview;

    call HmTSIntelliSense;

    call HmWebBrowserMode;

    call HmChromeBrowserMode;

    return;

//-----------------------------------------------------------
OnPost_NewDocumentMake:

    return;

//-----------------------------------------------------------
OnPost_WindowFocus:

    call HmSharedOutputPane;

    call HmLinkedTextPreview;

    call HmAutoCompleteEx;

    call HmTSIntelliSense;

    return;

//-----------------------------------------------------------
OnPrev_FileSave:
    return;

//-----------------------------------------------------------
OnPost_FileSave:
return;

    call MacFile_EncodeNormalize;

    call LuaFile_EncodeNormalize;

    return;

//-----------------------------------------------------------
OnPrev_FileClose:

    return;





//===========================================================
// 以下、各イベントハンドラ
//-----------------------------------------------------------

HmExcelFileLoader:

    if(filetype == ".xls" || filetype == ".xlsx" ) {
        // 閉じるので先にExcelファイルの名前をとっておく
        $$dummyXlsFileName = filename2;
        // 閉じる
        closenew;
        execmacro hidemarudir + @"\HmExcelFileLoader\HmExcelFileLoader.mac", $$dummyXlsFileName;
    }


LuaFile_EncodeNormalize:

    if (filetype == ".lua") {

        // 全部アスキー以外の場合だけ、BOM付きであれば
        if (bom) {
            call HmOutputPane, "「"+filename+"」は「コードページ" + str(codepage) + "」のBOM付のファイルです。\r\n";
        }

        // 多バイト文字っぽいのが含まれているか?

        // 文字数とバイト数が異なれば…といった趣旨
        if (charcount(0x00000000|0x00000000|0x00000000|0x00000000|0x00200000) != 
            charcount(0x00000001|0x00000000|0x00000100|0x00000000|0x00200000)) {

            if ((codepage!=65001) || bom) {
                // UTF8、現状の編集文字列を維持、強制BOM無し
                setencode 6, 1, 2;
                call HmOutputPane, ".luaなのでUTF8のBOM無しとしました。\r\n";
            }
        
        }

    }

    return;


MacFile_EncodeNormalize:
    /*
     * .macファイルなら、utf8やutf16ならBOMを自動付与、sjisなら何もなし
     * それ以外なら、マルチバイト文字がはいっていれば、警告メッセージをアウトプット枠へ
     */
    if (filetype == ".mac") {

        // utf8? or utf16?
        if (codepage==65001 || codepage==1200) {
            if (!bom) {
                setencode encode, 1, 1;
                save;

                call HmOutputPane, "秀丸マクロと判断した場合、BOMが必要です。\r\n ⇒ BOMを付与しました。\r\n";
            }
        }

        // sjis?
        else if (codepage==932) {
            ; // なし
        }

        // その他。
        // ワザとでもない限り、日本人がマクロ保存時にここに突入してはこないだろう…
        // 別言語圏の人が、その圏で主要なマルチバイト等で保存した、など？
        else {
            // 多バイト文字っぽいのが含まれているか?

            // 文字数とバイト数が異なれば…といった趣旨
            if (charcount(0x00000000|0x00000000|0x00000000|0x00000000|0x00200000) != 
                charcount(0x00000001|0x00000000|0x00000100|0x00000000|0x00200000)) {

                call HmOutputPane, "秀丸マクロと判断した場合、不正な文字コードです。\r\n ⇒ sjis / utf8(bom) / unicode(bom) のいずれかで保存してください。\r\n";
            }
        }
    }

    return;


HmLivePreview:

    if (filetype == ".md") {
        execmacro hidemarudir + @"\HmCustomLivePreview\HmCustomLivePreviewMD.mac";
    }

    return;


HmTSIntelliSense:

    if( filetype == ".js" || filetype == ".ts" ) {
        execmacro hidemarudir + @"\HmTSIntelliSense\HmTSHintPopup.mac";
    }

    return;

HmWebBrowserMode:
    if (filetype==".jpg" || filetype==".jpeg" || filetype==".bmp" || filetype==".png" || filetype==".gif" || filetype==".ico") {
        // setencode 26, 0;
        execmacro hidemarudir + @"\HmWebBrowserMode\HmWebBrowserMode.mac";
    }
    return;

HmChromeBrowserMode:

    if (filetype==".pdf") {
        // setencode 26, 0;
        execmacro hidemarudir + @"\HmChromeBrowserMode\\HmChromeBrowserMode.mac";
    }
    return;

HmChromeBrowserMode:
    execmacro hidemarudir + @"\HmChromeBrowserMode.mac";
    return;


HmOutputPane:

    $$message = $$1;

    #OUT = loaddll( hidemarudir + @"\HmOutputPane.dll");
    #ret = dllfunc(#OUT, "Output",hidemaruhandle(0), $$message);
    freedll(#OUT);

    return;


HmSharedOutputPane:

    #HSOP = loaddll( hidemarudir + @"\HmSharedOutputPane.dll");

    if(#HSOP) {
        #_ = dllfunc( #HSOP, "SetHidemaruHandle", hidemaruhandle(0) ); // 現在の秀丸ウィンドウハンドルの伝達
        #_ = dllfunc( #HSOP, "SetWithClearTime", -1 );                 // 新しいOutput枠を出す際に、前回のOutputから何ミリ秒経過するとクリアするか
    }

    // #HSOPをマクロ内で明示的にfreedllしてはならない!!
    // (秀丸が閉じられるとfreedllされる)
    return;


HmLinkedTextPreview:
    return;

    #HLTP = loaddll(hidemarudir + @"\HmLinkedTextPreview.dll");
    if (#HLTP) {
        #_ = dllfuncw( #HLTP, "SetHidemaruHandle", hidemaruhandle(0) );
    }

    // #HSOPをマクロ内で明示的にfreedllしてはならない!!
    // (秀丸が閉じられるとfreedllされる)
    return;


HmAutoCompleteEx:
    return;

    if (filetype == ".pl") {
        #HMACE = loaddll( hidemarudir + @"\HmAutoCompleteEx.dll" );
        if (#HMACE) {
            #_ = dllfuncw( #HMACE, "SetHidemaruHandle", hidemaruhandle(0), filename2 );
            #_ = dllfuncw( #HMACE, "BindAutoCompleter", hidemarudir + "\\HmAutoCompleteExPerl.dll", "\\.pl$" );
        }
    }
    return;
