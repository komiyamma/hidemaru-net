diff --git a/BUILD.gn b/BUILD.gn
index b2dde3f9d7..7742853244 100644
--- a/BUILD.gn
+++ b/BUILD.gn
@@ -538,7 +538,7 @@ config("toolchain") {
   visibility = [ ":*" ]  # Only targets in this file can depend on this.
 
   defines = []
-  cflags = []
+  cflags = [ "-Wno-invalid-offsetof" ]
   ldflags = []
 
   if (v8_current_cpu == "arm") {
@@ -3634,7 +3634,14 @@ v8_source_set("torque_ls_base") {
   }
 }
 
+if (v8_current_cpu == "x86") {
+  clearscript_v8_platform = "ia32"
+} else {
+  clearscript_v8_platform = v8_current_cpu
+}
+
 v8_component("v8_libbase") {
+  output_name = "v8-base-${clearscript_v8_platform}"
   sources = [
     "src/base/address-region.h",
     "src/base/atomic-utils.h",
@@ -3836,6 +3843,7 @@ v8_component("v8_libbase") {
 }
 
 v8_component("v8_libplatform") {
+  output_name = "v8-platform-${clearscript_v8_platform}"
   sources = [
     "//base/trace_event/common/trace_event_common.h",
     "include/libplatform/libplatform-export.h",
@@ -4277,6 +4285,7 @@ group("v8_fuzzers") {
 
 if (is_component_build) {
   v8_component("v8") {
+    output_name = "v8-${clearscript_v8_platform}"
     sources = [ "src/utils/v8dll-main.cc" ]
 
     public_deps = [
diff --git a/include/v8.h b/include/v8.h
index 9926b308b1..d05e6818df 100644
--- a/include/v8.h
+++ b/include/v8.h
@@ -1638,6 +1638,7 @@ class V8_EXPORT ScriptCompiler {
     // (with delete[]) when the CachedData object is destroyed.
     CachedData(const uint8_t* data, int length,
                BufferPolicy buffer_policy = BufferNotOwned);
+    void Delete();
     ~CachedData();
     // TODO(marja): Async compilation; add constructors which take a callback
     // which will be called when V8 no longer needs the data.
diff --git a/src/api/api.cc b/src/api/api.cc
index b2d6db3661..296bdef239 100644
--- a/src/api/api.cc
+++ b/src/api/api.cc
@@ -2092,6 +2092,10 @@ ScriptCompiler::CachedData::CachedData(const uint8_t* data_, int length_,
       rejected(false),
       buffer_policy(buffer_policy_) {}
 
+void ScriptCompiler::CachedData::Delete() {
+  delete this;
+}
+
 ScriptCompiler::CachedData::~CachedData() {
   if (buffer_policy == BufferOwned) {
     delete[] data;
diff --git a/src/codegen/code-stub-assembler.cc b/src/codegen/code-stub-assembler.cc
index 0464faea3b..1963cb06f2 100644
--- a/src/codegen/code-stub-assembler.cc
+++ b/src/codegen/code-stub-assembler.cc
@@ -12004,6 +12004,11 @@ TNode<String> CodeStubAssembler::Typeof(SloppyTNode<Object> value) {
 
   GotoIf(InstanceTypeEqual(instance_type, ODDBALL_TYPE), &if_oddball);
 
+  Label resume_default(this);
+  GotoIfNot(Word32And(LoadMapBitField(map), Int32Constant(Map::Bits1::HasNamedInterceptorBit::kMask)), &resume_default);
+  Branch(Word32And(LoadMapBitField2(map), Int32Constant(Map::Bits2::IsImmutablePrototypeBit::kMask)), &return_function, &return_object);
+  BIND(&resume_default);
+
   TNode<Int32T> callable_or_undetectable_mask =
       Word32And(LoadMapBitField(map),
                 Int32Constant(Map::Bits1::IsCallableBit::kMask |
diff --git a/src/compiler/backend/register-allocator-verifier.cc b/src/compiler/backend/register-allocator-verifier.cc
index 0090895367..eb900f18d9 100644
--- a/src/compiler/backend/register-allocator-verifier.cc
+++ b/src/compiler/backend/register-allocator-verifier.cc
@@ -352,7 +352,7 @@ bool BlockAssessments::IsStaleReferenceStackSlot(InstructionOperand op) {
 
 void BlockAssessments::Print() const {
   StdoutStream os;
-  for (const auto pair : map()) {
+  for (const auto& pair : map()) {
     const InstructionOperand op = pair.first;
     const Assessment* assessment = pair.second;
     // Use operator<< so we can write the assessment on the same
diff --git a/src/execution/stack-guard.cc b/src/execution/stack-guard.cc
index d37327f1c3..4f063b7bab 100644
--- a/src/execution/stack-guard.cc
+++ b/src/execution/stack-guard.cc
@@ -200,8 +200,10 @@ void StackGuard::FreeThreadResources() {
 void StackGuard::ThreadLocal::Initialize(Isolate* isolate,
                                          const ExecutionAccess& lock) {
   const uintptr_t kLimitSize = FLAG_stack_size * KB;
-  DCHECK_GT(GetCurrentStackPosition(), kLimitSize);
   uintptr_t limit = GetCurrentStackPosition() - kLimitSize;
+  if (GetCurrentStackPosition() < kLimitSize) {
+    limit = 0;
+  }
   real_jslimit_ = SimulatorStack::JsLimitFromCLimit(isolate, limit);
   set_jslimit(SimulatorStack::JsLimitFromCLimit(isolate, limit));
   real_climit_ = limit;
diff --git a/src/init/v8.cc b/src/init/v8.cc
index edcc399f95..119839bebb 100644
--- a/src/init/v8.cc
+++ b/src/init/v8.cc
@@ -123,7 +123,6 @@ void V8::InitializeOncePerProcess() {
 }
 
 void V8::InitializePlatform(v8::Platform* platform) {
-  CHECK(!platform_);
   CHECK(platform);
   platform_ = platform;
   v8::base::SetPrintStackTrace(platform_->GetStackTracePrinter());
diff --git a/src/objects/objects.cc b/src/objects/objects.cc
index c455629651..5a760233b9 100644
--- a/src/objects/objects.cc
+++ b/src/objects/objects.cc
@@ -823,6 +823,12 @@ Handle<String> Object::TypeOf(Isolate* isolate, Handle<Object> object) {
   if (object->IsString()) return isolate->factory()->string_string();
   if (object->IsSymbol()) return isolate->factory()->symbol_string();
   if (object->IsBigInt()) return isolate->factory()->bigint_string();
+  if (object->IsJSObject()) {
+    Handle<JSObject> obj = Handle<JSObject>::cast(object);
+    if (obj->HasNamedInterceptor()) {
+      return obj->map().is_immutable_proto() ? isolate->factory()->function_string() : isolate->factory()->object_string();
+    }
+  }
   if (object->IsCallable()) return isolate->factory()->function_string();
   return isolate->factory()->object_string();
 }
